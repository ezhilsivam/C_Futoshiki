#include "pch.h"
#include <iostream>
#include "conio.h"

bool TestInput7x7()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.', 
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.', 
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.', 
								'.', '.', '.', '.', '.', '.', '.', 
								'.', '.', '.', '.', '.', '.', '.', 
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}

bool TestInput7_1()
{
	int Numeral_Inputs[] = { 0, 3, 0, 0, 0, 5, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 4, 5, 0, 0, 0, 2, 7,
							 0, 0, 0, 0, 0, 0, 0,
							 2, 6, 0, 0, 0, 1, 3,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 2, 0, 0, 0, 3, 0 };


	char betweenColsChar[] = {  '.', '.', '>', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '>', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '<', '.', '<' };

	char betweenRowsChar[] = {  '.', '.', '.', '.', 'v', '.', '^',
								'.', '^', '.', '.', '.', '.', '.',
								'.', '.', '.', 'v', '.', '.', '.',
								'.', '.', 'v', '.', '.', '.', 'v',
								'.', '.', '.', '.', '.', '.', '^',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_2()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 7, 0, 0, 0, 0, 0,
							 0, 0, 6, 0, 0, 0, 4,
							 0, 4, 0, 0, 0, 5, 0,
							 7, 0, 0, 0, 3, 0, 0,
							 0, 0, 0, 0, 0, 1, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = {  '>', '>', '.', '>', '.', '>',
								'.', '.', '.', '>', '.', '.',
								'>', '.', '>', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '>', '>', '.', '.', '.',
								'.', '<', '<', '.', '.', '.',
								'.', '<', '.', '.', '.', '<' };

	char betweenRowsChar[] = {  '.', '.', 'v', '^', '.', '.', 'v',
								'v', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', 'v', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_3()
{
	int Numeral_Inputs[] = { 0, 3, 6, 0, 1, 4, 0,
							 2, 0, 0, 0, 0, 0, 7,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 1, 0, 0, 0, 0, 0, 5,
							 0, 2, 7, 0, 6, 5, 0 };


	char betweenColsChar[] = {  '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '<', '.', '<', '.',
								'.', '.', '.', '.', '.', '.',
								'>', '.', '.', '>', '.', '>',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = {  '.', '.', '.', '.', '.', '^', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', 'v', '.', '.', '.', 'v',
								'.', '.', '.', '.', '.', '.', '.',
								'.', 'v', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_4()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_5()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_6()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_7()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_8()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_9()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_10()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_11()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
bool TestInput7_12()
{
	int Numeral_Inputs[] = { 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0 };


	char betweenColsChar[] = { '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.' };

	char betweenRowsChar[] = { '.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.',
								'.', '.', '.', '.', '.', '.', '.' };

	return SolveFutoshiki(Numeral_Inputs, betweenColsChar, betweenRowsChar, 7);
}
